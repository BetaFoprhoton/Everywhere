using System.Security;
using nietras.SeparatedValues;

var tsvPath = Path.GetFullPath(args[0]);
if (!File.Exists(tsvPath)) throw new FileNotFoundException("TSV file not found", tsvPath);

await using var localeManagerWriter = new StreamWriter(File.Create(Path.Combine(args[1], "LocaleManager.g.cs")));
await localeManagerWriter.WriteLineAsync(
    $$"""
      // Generated by Everywhere.I18N.Generator, do not edit manually
      // Edit {{tsvPath}} instead, run the generator or build project to update this file

      #nullable enable
      
      using global::System.Diagnostics.CodeAnalysis;
      using global::Avalonia.Controls;

      namespace Everywhere.I18N;

      public static class LocaleManager
      {
          public static IEnumerable<string> AvailableLocaleNames => Locales.Keys;

          private static readonly Dictionary<string, ResourceDictionary> Locales = new();

          static LocaleManager()
          {
      """);

using var reader = await new Sep('\t').Reader().FromFileAsync(tsvPath);
for (var col = 0; col < reader.Header.ColNames.Count; col++)
{
    var localeName = reader.Header.ColNames[col];
    var escapedLocaleName = localeName.Replace('-', '_');

    if (col == 0)
    {
        await using var xamlWriter = new StreamWriter(File.Create(Path.Combine(args[1], "Key.axaml")));
        await xamlWriter.WriteLineAsync(
            $"""
             <!-- Generated by Everywhere.I18N.Generator, do not edit manually -->
             <!-- Edit {tsvPath} instead, run the generator or build project to update this file -->

             <ResourceDictionary 
                 xmlns="https://github.com/avaloniaui"
                 xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
             """);

        await using var csWriter = new StreamWriter(File.Create(Path.Combine(args[1], "LocaleKey.g.cs")));
        await csWriter.WriteLineAsync(
            $$"""
              // Generated by Everywhere.I18N.Generator, do not edit manually
              // Edit {{tsvPath}} instead, run the generator or build project to update this file
              
              #nullable enable
              
              namespace Everywhere.I18N;

              public static class LocaleKey
              {
              """);
        await foreach (var row in await new Sep('\t').Reader(o => o with
                       {
                           DisableColCountCheck = true,
                           Unescape = true
                       }).FromFileAsync(tsvPath))
        {
            if (col >= row.ColCount) continue;
            var key = row[0].ToString();
            var value = row[col].ToString();

            xamlWriter.Write("    <x:String x:Key=\"");
            xamlWriter.Write(SecurityElement.Escape(key));
            xamlWriter.Write("\">");
            xamlWriter.Write(SecurityElement.Escape(value));
            xamlWriter.WriteLine("</x:String>");
            await xamlWriter.FlushAsync();

            csWriter.Write("    public const string ");
            csWriter.Write(EscapeVariableName(key));

            csWriter.Write(" = \"");
            csWriter.Write(value);
            csWriter.WriteLine("\";");
            await csWriter.FlushAsync();
        }

        await xamlWriter.WriteLineAsync("</ResourceDictionary>");
        await csWriter.WriteAsync("}");
    }
    else
    {
        await using var writer = new StreamWriter(File.Create(Path.Combine(args[1], localeName + ".g.cs")));
        await writer.WriteLineAsync(
            $$"""
              // Generated by Everywhere.I18N.Generator, do not edit manually
              // Edit {{tsvPath}} instead, run the generator or build project to update this file
              
              #nullable enable
              
              namespace Everywhere.I18N;

              public class {{escapedLocaleName}} : global::Avalonia.Controls.ResourceDictionary
              {
                  public {{escapedLocaleName}}()
                  {
              """);

        await foreach (var row in await new Sep('\t').Reader(o => o with
                       {
                           DisableColCountCheck = true,
                           Unescape = true
                       }).FromFileAsync(tsvPath))
        {
            if (col >= row.ColCount) continue;
            var key = row[0].ToString();
            var value = row[col].ToString();
            writer.Write("        Add(\"");
            writer.Write(key);
            writer.Write("\", \"");
            writer.Write(value);
            writer.WriteLine("\");");
            await writer.FlushAsync();
        }

        await writer.WriteAsync(
            """
                }
            }
            """);

        await localeManagerWriter.WriteLineAsync($"        Locales.Add(\"{localeName}\", new {escapedLocaleName}());");
    }
}

await localeManagerWriter.WriteLineAsync(
    """
        }

        public static string? CurrentLocale
        {
            get;
            set
            {
                if (field == value) return;
        
                var app = Application.Current!;
                if (field != null && Locales.TryGetValue(field, out var oldLocale))
                {
                    app.Resources.MergedDictionaries.Remove(oldLocale);
                }
                
                field = value;
                if (value is null || !Locales.TryGetValue(value, out var newLocale))
                {
                    (field, newLocale) = Locales.First();
                }
                app.Resources.MergedDictionaries.Add(newLocale);
            }
        }
    }
    """);

Console.WriteLine("Everywhere.I18N.Generator finished");


string EscapeVariableName(string s)
{
    // Replace invalid characters with underscores, and ensure it starts with a letter
    var escaped = new string(s.Select(c => char.IsLetterOrDigit(c) ? c : '_').ToArray());
    if (char.IsDigit(escaped[0]))
    {
        escaped = "_" + escaped; // Ensure it starts with a letter or underscore
    }
    return escaped;
}